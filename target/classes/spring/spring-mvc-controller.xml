<?xml version="1.0" encoding="GBK"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="  
        http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd  
        http://www.springframework.org/schema/mvc   
    	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!-- 对项目中的所有类进行扫描以完成Bean创建并进行自动注入。  
           支持 @Controller、@Service 以及 @Repository 和 @Component -->
	<!-- 扫描项目中com.fh.shop.controller包下所有的类，从而使类中的@Controller注解生效 -->
    <context:component-scan base-package="com.fh.shop.backend.controller"/>
    <context:component-scan base-package="com.fh.shop.backend.api"/>


	<!--
        jsp视图解析器，对模型视图名称的解析，即在模型视图名称添加前后缀
	    如/view/welcome.jsp对应的视图名就是：welcome
	    这个类在视图解析器链中一定要定义在其他视图的后面，因为它始终会返回一个视图
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".jsp"/>
    </bean>




	<!-- 用于解决ajax回调函数时出现的406错误 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	
	<!--  静态文件访问,主要是让DispatcherServlet不拦截以下静态资源 -->	
	<mvc:resources location="/commons/" mapping="/commons/**"/>

	<!--springMvc拦截器  -->
    <!-- 拦截器 -->
	 <mvc:interceptors>
		<mvc:interceptor>
		<!--拦截所有请求  -->
			<mvc:mapping path="/**" />
			<!-- 排除那些请求不被拦截 -->
			<mvc:exclude-mapping path="/loginController/**"/>
			<mvc:exclude-mapping path="/commons/**"/>
			<!-- 拦截器的实现类，里边定义是自定义的拦截规则 -->
        	<bean class="com.fh.shop.backend.interceptor.Interceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>
	
	
	<!-- 解决400错误 -->
	<!-- 时间类型引起的400错误 -->
    <!-- 加载@DateTimeFormat-->
    <mvc:annotation-driven conversion-service="conversionService"/>
    <bean id="conversionService"
          class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
     </bean>
     
     
	 <!-- 首先创建一个切面对象 -->
     <!-- 相当于：AspectInfo aspectInfo = new com.fh.shop.backend.aspect.AspectInfo();	 -->
     <bean id="aspectInfo" class="com.fh.shop.backend.aspect.AspectInfo"></bean>
     <!-- 创建切点表达式 -->
     <aop:config>
     	<aop:aspect ref="aspectInfo">
     		<aop:pointcut expression="execution(* com.fh.shop.backend.controller..*.*(..))" id="pointCut"/>
     		<aop:around method="logInfo" pointcut-ref="pointCut"/>
     	</aop:aspect>
     </aop:config>
     
     <!-- 切面配置的先后顺序，决定了切面类的优先级，配置在上面的优先级高 -->
     <!-- 创建日志记录类的对象 -->
     <bean id="loginAspect" class="com.fh.shop.backend.aspect.LogAspect"></bean>
     <aop:config>
     	<aop:aspect ref="loginAspect">
     		<aop:pointcut expression="execution(* com.fh.shop.backend.controller..*.add*(..)) || execution(* com.fh.shop.backend.controller..*.del*(..)) || execution(* com.fh.shop.backend.controller..*.update*(..)) || execution(* com.fh.shop.backend.controller..*.login(..)) || execution(* com.fh.shop.backend.controller..*.export*(..))" id="logPointCut"/>
     		<aop:around method="logInfo" pointcut-ref="logPointCut"/>
     	</aop:aspect>
     </aop:config>


	<!--图片上传设置-->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> <!--允许上传文件大小 -->
		<property name="maxUploadSize" value="104857600000" />
		<!--缓存大小 -->
		<property name="maxInMemorySize" value="4096" />
		<property name="defaultEncoding" value="UTF-8"></property>
	</bean>

</beans>